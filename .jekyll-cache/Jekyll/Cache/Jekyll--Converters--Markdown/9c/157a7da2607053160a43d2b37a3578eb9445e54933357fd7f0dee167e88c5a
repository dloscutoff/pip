I"t<p>Each command is given, followed by a pseudocode equivalent and an explanation.</p>

<h3 id="for-loop">For loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fil{...}

foreach(i in l) {...}
</code></pre></div></div>

<p>Loops the variable <code class="language-plaintext highlighter-rouge">i</code> over each item in <code class="language-plaintext highlighter-rouge">l</code>. Legal types for the iteration object are scalar, list, and range. The variable must be a single identifier; this requirement allows the following very useful syntax with the unary range operator:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fi,20{...}

foreach(i in range(0, 20)) {...}
</code></pre></div></div>

<h3 id="if-statement">If statement</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ix&lt;0{...}EIx&gt;0{...}E{...}

if(x &lt; 0) {...} elseif(x &lt; 0) {...} else {...}
</code></pre></div></div>

<p>Since both the if and else branches may drop the curly braces if they contain single statements, the <code class="language-plaintext highlighter-rouge">EI</code> is just syntactic sugar for <code class="language-plaintext highlighter-rouge">E I</code>.</p>

<h3 id="fixed-iterations-loop">Fixed iterations loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>L10{...}

repeat 10 times {...}
</code></pre></div></div>

<p>Like a for loop, but takes a number rather than an iterable, and does not assign to a loop variable. Equivalent of <code class="language-plaintext highlighter-rouge">{...}*10</code> in some languages.</p>

<h3 id="regex-match-loop">Regex match loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LRxs{...}

foreach(regex match of x in s) {...}
</code></pre></div></div>

<p>Similar to <code class="language-plaintext highlighter-rouge">while $s =~ $x</code> in Perl. Use regex special variables to access match data on each iteration.</p>

<h3 id="swap-statement">Swap statement</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sab

swap values of a, b
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> can be any two expressions as long as they evaluate to lvalues. For instance, <code class="language-plaintext highlighter-rouge">Sx@0x@1</code> will swap the first two items in an iterable <code class="language-plaintext highlighter-rouge">x</code>.</p>

<h3 id="till-loop">Till loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tx&gt;9{...}

while(not x &gt; 9) {...}
</code></pre></div></div>

<p>Loop as long as the condition is false; stop when it becomes true.</p>

<h3 id="unify">Unify</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UxyzWg

(x,y,z) = g
</code></pre></div></div>

<p>Read as “unify <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code> with <code class="language-plaintext highlighter-rouge">g</code>.” Like Python’s tuple unpacking, but works even if the size of the list doesn’t match the number of variables: if the list is too long, the remainder is ignored; if the list is too short, the latter variables get values of nil.</p>

<h3 id="while-loop">While loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Wx&lt;10{...}

while(x &lt; 10) {...}
</code></pre></div></div>

<p>Loop as long as the condition is true; stop when it becomes false.</p>

<h3 id="wipe-globals">Wipe globals</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WG
</code></pre></div></div>

<p>Resets all global variables to their default values.</p>
:ET